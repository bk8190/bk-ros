"""autogenerated by genmsg_py from Skeletons.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import body_msgs.msg
import std_msgs.msg

class Skeletons(roslib.message.Message):
  _md5sum = "8d6667331403917cc53d8d820001e6f9"
  _type = "body_msgs/Skeletons"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
body_msgs/Skeleton[] skeletons

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: body_msgs/Skeleton
int32 playerid
body_msgs/SkeletonJoint head
body_msgs/SkeletonJoint neck
body_msgs/SkeletonJoint right_hand
body_msgs/SkeletonJoint left_hand
body_msgs/SkeletonJoint right_shoulder
body_msgs/SkeletonJoint left_shoulder
body_msgs/SkeletonJoint right_elbow
body_msgs/SkeletonJoint left_elbow
body_msgs/SkeletonJoint torso
body_msgs/SkeletonJoint left_hip
body_msgs/SkeletonJoint right_hip
body_msgs/SkeletonJoint left_knee
body_msgs/SkeletonJoint right_knee
body_msgs/SkeletonJoint left_foot
body_msgs/SkeletonJoint right_foot

================================================================================
MSG: body_msgs/SkeletonJoint
geometry_msgs/Point position
float32 confidence
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['header','skeletons']
  _slot_types = ['Header','body_msgs/Skeleton[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,skeletons
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Skeletons, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.skeletons is None:
        self.skeletons = []
    else:
      self.header = std_msgs.msg._Header.Header()
      self.skeletons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons:
        buff.write(_struct_i.pack(val1.playerid))
        _v1 = val1.head
        _v2 = _v1.position
        _x = _v2
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v1.confidence))
        _v3 = val1.neck
        _v4 = _v3.position
        _x = _v4
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v3.confidence))
        _v5 = val1.right_hand
        _v6 = _v5.position
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v5.confidence))
        _v7 = val1.left_hand
        _v8 = _v7.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v7.confidence))
        _v9 = val1.right_shoulder
        _v10 = _v9.position
        _x = _v10
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v9.confidence))
        _v11 = val1.left_shoulder
        _v12 = _v11.position
        _x = _v12
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v11.confidence))
        _v13 = val1.right_elbow
        _v14 = _v13.position
        _x = _v14
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v13.confidence))
        _v15 = val1.left_elbow
        _v16 = _v15.position
        _x = _v16
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v15.confidence))
        _v17 = val1.torso
        _v18 = _v17.position
        _x = _v18
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v17.confidence))
        _v19 = val1.left_hip
        _v20 = _v19.position
        _x = _v20
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v19.confidence))
        _v21 = val1.right_hip
        _v22 = _v21.position
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v21.confidence))
        _v23 = val1.left_knee
        _v24 = _v23.position
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v23.confidence))
        _v25 = val1.right_knee
        _v26 = _v25.position
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v25.confidence))
        _v27 = val1.left_foot
        _v28 = _v27.position
        _x = _v28
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v27.confidence))
        _v29 = val1.right_foot
        _v30 = _v29.position
        _x = _v30
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v29.confidence))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons = []
      for i in range(0, length):
        val1 = body_msgs.msg.Skeleton()
        start = end
        end += 4
        (val1.playerid,) = _struct_i.unpack(str[start:end])
        _v31 = val1.head
        _v32 = _v31.position
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v31.confidence,) = _struct_f.unpack(str[start:end])
        _v33 = val1.neck
        _v34 = _v33.position
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v33.confidence,) = _struct_f.unpack(str[start:end])
        _v35 = val1.right_hand
        _v36 = _v35.position
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v35.confidence,) = _struct_f.unpack(str[start:end])
        _v37 = val1.left_hand
        _v38 = _v37.position
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v37.confidence,) = _struct_f.unpack(str[start:end])
        _v39 = val1.right_shoulder
        _v40 = _v39.position
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v39.confidence,) = _struct_f.unpack(str[start:end])
        _v41 = val1.left_shoulder
        _v42 = _v41.position
        _x = _v42
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v41.confidence,) = _struct_f.unpack(str[start:end])
        _v43 = val1.right_elbow
        _v44 = _v43.position
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v43.confidence,) = _struct_f.unpack(str[start:end])
        _v45 = val1.left_elbow
        _v46 = _v45.position
        _x = _v46
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v45.confidence,) = _struct_f.unpack(str[start:end])
        _v47 = val1.torso
        _v48 = _v47.position
        _x = _v48
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v47.confidence,) = _struct_f.unpack(str[start:end])
        _v49 = val1.left_hip
        _v50 = _v49.position
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v49.confidence,) = _struct_f.unpack(str[start:end])
        _v51 = val1.right_hip
        _v52 = _v51.position
        _x = _v52
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v51.confidence,) = _struct_f.unpack(str[start:end])
        _v53 = val1.left_knee
        _v54 = _v53.position
        _x = _v54
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v53.confidence,) = _struct_f.unpack(str[start:end])
        _v55 = val1.right_knee
        _v56 = _v55.position
        _x = _v56
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v55.confidence,) = _struct_f.unpack(str[start:end])
        _v57 = val1.left_foot
        _v58 = _v57.position
        _x = _v58
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v57.confidence,) = _struct_f.unpack(str[start:end])
        _v59 = val1.right_foot
        _v60 = _v59.position
        _x = _v60
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v59.confidence,) = _struct_f.unpack(str[start:end])
        self.skeletons.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.skeletons)
      buff.write(_struct_I.pack(length))
      for val1 in self.skeletons:
        buff.write(_struct_i.pack(val1.playerid))
        _v61 = val1.head
        _v62 = _v61.position
        _x = _v62
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v61.confidence))
        _v63 = val1.neck
        _v64 = _v63.position
        _x = _v64
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v63.confidence))
        _v65 = val1.right_hand
        _v66 = _v65.position
        _x = _v66
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v65.confidence))
        _v67 = val1.left_hand
        _v68 = _v67.position
        _x = _v68
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v67.confidence))
        _v69 = val1.right_shoulder
        _v70 = _v69.position
        _x = _v70
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v69.confidence))
        _v71 = val1.left_shoulder
        _v72 = _v71.position
        _x = _v72
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v71.confidence))
        _v73 = val1.right_elbow
        _v74 = _v73.position
        _x = _v74
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v73.confidence))
        _v75 = val1.left_elbow
        _v76 = _v75.position
        _x = _v76
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v75.confidence))
        _v77 = val1.torso
        _v78 = _v77.position
        _x = _v78
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v77.confidence))
        _v79 = val1.left_hip
        _v80 = _v79.position
        _x = _v80
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v79.confidence))
        _v81 = val1.right_hip
        _v82 = _v81.position
        _x = _v82
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v81.confidence))
        _v83 = val1.left_knee
        _v84 = _v83.position
        _x = _v84
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v83.confidence))
        _v85 = val1.right_knee
        _v86 = _v85.position
        _x = _v86
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v85.confidence))
        _v87 = val1.left_foot
        _v88 = _v87.position
        _x = _v88
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v87.confidence))
        _v89 = val1.right_foot
        _v90 = _v89.position
        _x = _v90
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(_v89.confidence))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.skeletons = []
      for i in range(0, length):
        val1 = body_msgs.msg.Skeleton()
        start = end
        end += 4
        (val1.playerid,) = _struct_i.unpack(str[start:end])
        _v91 = val1.head
        _v92 = _v91.position
        _x = _v92
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v91.confidence,) = _struct_f.unpack(str[start:end])
        _v93 = val1.neck
        _v94 = _v93.position
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v93.confidence,) = _struct_f.unpack(str[start:end])
        _v95 = val1.right_hand
        _v96 = _v95.position
        _x = _v96
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v95.confidence,) = _struct_f.unpack(str[start:end])
        _v97 = val1.left_hand
        _v98 = _v97.position
        _x = _v98
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v97.confidence,) = _struct_f.unpack(str[start:end])
        _v99 = val1.right_shoulder
        _v100 = _v99.position
        _x = _v100
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v99.confidence,) = _struct_f.unpack(str[start:end])
        _v101 = val1.left_shoulder
        _v102 = _v101.position
        _x = _v102
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v101.confidence,) = _struct_f.unpack(str[start:end])
        _v103 = val1.right_elbow
        _v104 = _v103.position
        _x = _v104
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v103.confidence,) = _struct_f.unpack(str[start:end])
        _v105 = val1.left_elbow
        _v106 = _v105.position
        _x = _v106
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v105.confidence,) = _struct_f.unpack(str[start:end])
        _v107 = val1.torso
        _v108 = _v107.position
        _x = _v108
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v107.confidence,) = _struct_f.unpack(str[start:end])
        _v109 = val1.left_hip
        _v110 = _v109.position
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v109.confidence,) = _struct_f.unpack(str[start:end])
        _v111 = val1.right_hip
        _v112 = _v111.position
        _x = _v112
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v111.confidence,) = _struct_f.unpack(str[start:end])
        _v113 = val1.left_knee
        _v114 = _v113.position
        _x = _v114
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v113.confidence,) = _struct_f.unpack(str[start:end])
        _v115 = val1.right_knee
        _v116 = _v115.position
        _x = _v116
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v115.confidence,) = _struct_f.unpack(str[start:end])
        _v117 = val1.left_foot
        _v118 = _v117.position
        _x = _v118
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v117.confidence,) = _struct_f.unpack(str[start:end])
        _v119 = val1.right_foot
        _v120 = _v119.position
        _x = _v120
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        start = end
        end += 4
        (_v119.confidence,) = _struct_f.unpack(str[start:end])
        self.skeletons.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_f = struct.Struct("<f")
_struct_3d = struct.Struct("<3d")
