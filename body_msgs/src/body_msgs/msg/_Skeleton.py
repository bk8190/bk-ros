"""autogenerated by genmsg_py from Skeleton.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg
import body_msgs.msg

class Skeleton(roslib.message.Message):
  _md5sum = "0c41aa8101907706f9e2c5e6f1a31dfd"
  _type = "body_msgs/Skeleton"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 playerid
body_msgs/SkeletonJoint head
body_msgs/SkeletonJoint neck
body_msgs/SkeletonJoint right_hand
body_msgs/SkeletonJoint left_hand
body_msgs/SkeletonJoint right_shoulder
body_msgs/SkeletonJoint left_shoulder
body_msgs/SkeletonJoint right_elbow
body_msgs/SkeletonJoint left_elbow
body_msgs/SkeletonJoint torso
body_msgs/SkeletonJoint left_hip
body_msgs/SkeletonJoint right_hip
body_msgs/SkeletonJoint left_knee
body_msgs/SkeletonJoint right_knee
body_msgs/SkeletonJoint left_foot
body_msgs/SkeletonJoint right_foot

================================================================================
MSG: body_msgs/SkeletonJoint
geometry_msgs/Point position
float32 confidence
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['playerid','head','neck','right_hand','left_hand','right_shoulder','left_shoulder','right_elbow','left_elbow','torso','left_hip','right_hip','left_knee','right_knee','left_foot','right_foot']
  _slot_types = ['int32','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint','body_msgs/SkeletonJoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       playerid,head,neck,right_hand,left_hand,right_shoulder,left_shoulder,right_elbow,left_elbow,torso,left_hip,right_hip,left_knee,right_knee,left_foot,right_foot
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Skeleton, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.playerid is None:
        self.playerid = 0
      if self.head is None:
        self.head = body_msgs.msg.SkeletonJoint()
      if self.neck is None:
        self.neck = body_msgs.msg.SkeletonJoint()
      if self.right_hand is None:
        self.right_hand = body_msgs.msg.SkeletonJoint()
      if self.left_hand is None:
        self.left_hand = body_msgs.msg.SkeletonJoint()
      if self.right_shoulder is None:
        self.right_shoulder = body_msgs.msg.SkeletonJoint()
      if self.left_shoulder is None:
        self.left_shoulder = body_msgs.msg.SkeletonJoint()
      if self.right_elbow is None:
        self.right_elbow = body_msgs.msg.SkeletonJoint()
      if self.left_elbow is None:
        self.left_elbow = body_msgs.msg.SkeletonJoint()
      if self.torso is None:
        self.torso = body_msgs.msg.SkeletonJoint()
      if self.left_hip is None:
        self.left_hip = body_msgs.msg.SkeletonJoint()
      if self.right_hip is None:
        self.right_hip = body_msgs.msg.SkeletonJoint()
      if self.left_knee is None:
        self.left_knee = body_msgs.msg.SkeletonJoint()
      if self.right_knee is None:
        self.right_knee = body_msgs.msg.SkeletonJoint()
      if self.left_foot is None:
        self.left_foot = body_msgs.msg.SkeletonJoint()
      if self.right_foot is None:
        self.right_foot = body_msgs.msg.SkeletonJoint()
    else:
      self.playerid = 0
      self.head = body_msgs.msg.SkeletonJoint()
      self.neck = body_msgs.msg.SkeletonJoint()
      self.right_hand = body_msgs.msg.SkeletonJoint()
      self.left_hand = body_msgs.msg.SkeletonJoint()
      self.right_shoulder = body_msgs.msg.SkeletonJoint()
      self.left_shoulder = body_msgs.msg.SkeletonJoint()
      self.right_elbow = body_msgs.msg.SkeletonJoint()
      self.left_elbow = body_msgs.msg.SkeletonJoint()
      self.torso = body_msgs.msg.SkeletonJoint()
      self.left_hip = body_msgs.msg.SkeletonJoint()
      self.right_hip = body_msgs.msg.SkeletonJoint()
      self.left_knee = body_msgs.msg.SkeletonJoint()
      self.right_knee = body_msgs.msg.SkeletonJoint()
      self.left_foot = body_msgs.msg.SkeletonJoint()
      self.right_foot = body_msgs.msg.SkeletonJoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df.pack(_x.playerid, _x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.confidence, _x.neck.position.x, _x.neck.position.y, _x.neck.position.z, _x.neck.confidence, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.confidence, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.confidence, _x.right_shoulder.position.x, _x.right_shoulder.position.y, _x.right_shoulder.position.z, _x.right_shoulder.confidence, _x.left_shoulder.position.x, _x.left_shoulder.position.y, _x.left_shoulder.position.z, _x.left_shoulder.confidence, _x.right_elbow.position.x, _x.right_elbow.position.y, _x.right_elbow.position.z, _x.right_elbow.confidence, _x.left_elbow.position.x, _x.left_elbow.position.y, _x.left_elbow.position.z, _x.left_elbow.confidence, _x.torso.position.x, _x.torso.position.y, _x.torso.position.z, _x.torso.confidence, _x.left_hip.position.x, _x.left_hip.position.y, _x.left_hip.position.z, _x.left_hip.confidence, _x.right_hip.position.x, _x.right_hip.position.y, _x.right_hip.position.z, _x.right_hip.confidence, _x.left_knee.position.x, _x.left_knee.position.y, _x.left_knee.position.z, _x.left_knee.confidence, _x.right_knee.position.x, _x.right_knee.position.y, _x.right_knee.position.z, _x.right_knee.confidence, _x.left_foot.position.x, _x.left_foot.position.y, _x.left_foot.position.z, _x.left_foot.confidence, _x.right_foot.position.x, _x.right_foot.position.y, _x.right_foot.position.z, _x.right_foot.confidence))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.head is None:
        self.head = body_msgs.msg.SkeletonJoint()
      if self.neck is None:
        self.neck = body_msgs.msg.SkeletonJoint()
      if self.right_hand is None:
        self.right_hand = body_msgs.msg.SkeletonJoint()
      if self.left_hand is None:
        self.left_hand = body_msgs.msg.SkeletonJoint()
      if self.right_shoulder is None:
        self.right_shoulder = body_msgs.msg.SkeletonJoint()
      if self.left_shoulder is None:
        self.left_shoulder = body_msgs.msg.SkeletonJoint()
      if self.right_elbow is None:
        self.right_elbow = body_msgs.msg.SkeletonJoint()
      if self.left_elbow is None:
        self.left_elbow = body_msgs.msg.SkeletonJoint()
      if self.torso is None:
        self.torso = body_msgs.msg.SkeletonJoint()
      if self.left_hip is None:
        self.left_hip = body_msgs.msg.SkeletonJoint()
      if self.right_hip is None:
        self.right_hip = body_msgs.msg.SkeletonJoint()
      if self.left_knee is None:
        self.left_knee = body_msgs.msg.SkeletonJoint()
      if self.right_knee is None:
        self.right_knee = body_msgs.msg.SkeletonJoint()
      if self.left_foot is None:
        self.left_foot = body_msgs.msg.SkeletonJoint()
      if self.right_foot is None:
        self.right_foot = body_msgs.msg.SkeletonJoint()
      end = 0
      _x = self
      start = end
      end += 424
      (_x.playerid, _x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.confidence, _x.neck.position.x, _x.neck.position.y, _x.neck.position.z, _x.neck.confidence, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.confidence, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.confidence, _x.right_shoulder.position.x, _x.right_shoulder.position.y, _x.right_shoulder.position.z, _x.right_shoulder.confidence, _x.left_shoulder.position.x, _x.left_shoulder.position.y, _x.left_shoulder.position.z, _x.left_shoulder.confidence, _x.right_elbow.position.x, _x.right_elbow.position.y, _x.right_elbow.position.z, _x.right_elbow.confidence, _x.left_elbow.position.x, _x.left_elbow.position.y, _x.left_elbow.position.z, _x.left_elbow.confidence, _x.torso.position.x, _x.torso.position.y, _x.torso.position.z, _x.torso.confidence, _x.left_hip.position.x, _x.left_hip.position.y, _x.left_hip.position.z, _x.left_hip.confidence, _x.right_hip.position.x, _x.right_hip.position.y, _x.right_hip.position.z, _x.right_hip.confidence, _x.left_knee.position.x, _x.left_knee.position.y, _x.left_knee.position.z, _x.left_knee.confidence, _x.right_knee.position.x, _x.right_knee.position.y, _x.right_knee.position.z, _x.right_knee.confidence, _x.left_foot.position.x, _x.left_foot.position.y, _x.left_foot.position.z, _x.left_foot.confidence, _x.right_foot.position.x, _x.right_foot.position.y, _x.right_foot.position.z, _x.right_foot.confidence,) = _struct_i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df.pack(_x.playerid, _x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.confidence, _x.neck.position.x, _x.neck.position.y, _x.neck.position.z, _x.neck.confidence, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.confidence, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.confidence, _x.right_shoulder.position.x, _x.right_shoulder.position.y, _x.right_shoulder.position.z, _x.right_shoulder.confidence, _x.left_shoulder.position.x, _x.left_shoulder.position.y, _x.left_shoulder.position.z, _x.left_shoulder.confidence, _x.right_elbow.position.x, _x.right_elbow.position.y, _x.right_elbow.position.z, _x.right_elbow.confidence, _x.left_elbow.position.x, _x.left_elbow.position.y, _x.left_elbow.position.z, _x.left_elbow.confidence, _x.torso.position.x, _x.torso.position.y, _x.torso.position.z, _x.torso.confidence, _x.left_hip.position.x, _x.left_hip.position.y, _x.left_hip.position.z, _x.left_hip.confidence, _x.right_hip.position.x, _x.right_hip.position.y, _x.right_hip.position.z, _x.right_hip.confidence, _x.left_knee.position.x, _x.left_knee.position.y, _x.left_knee.position.z, _x.left_knee.confidence, _x.right_knee.position.x, _x.right_knee.position.y, _x.right_knee.position.z, _x.right_knee.confidence, _x.left_foot.position.x, _x.left_foot.position.y, _x.left_foot.position.z, _x.left_foot.confidence, _x.right_foot.position.x, _x.right_foot.position.y, _x.right_foot.position.z, _x.right_foot.confidence))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.head is None:
        self.head = body_msgs.msg.SkeletonJoint()
      if self.neck is None:
        self.neck = body_msgs.msg.SkeletonJoint()
      if self.right_hand is None:
        self.right_hand = body_msgs.msg.SkeletonJoint()
      if self.left_hand is None:
        self.left_hand = body_msgs.msg.SkeletonJoint()
      if self.right_shoulder is None:
        self.right_shoulder = body_msgs.msg.SkeletonJoint()
      if self.left_shoulder is None:
        self.left_shoulder = body_msgs.msg.SkeletonJoint()
      if self.right_elbow is None:
        self.right_elbow = body_msgs.msg.SkeletonJoint()
      if self.left_elbow is None:
        self.left_elbow = body_msgs.msg.SkeletonJoint()
      if self.torso is None:
        self.torso = body_msgs.msg.SkeletonJoint()
      if self.left_hip is None:
        self.left_hip = body_msgs.msg.SkeletonJoint()
      if self.right_hip is None:
        self.right_hip = body_msgs.msg.SkeletonJoint()
      if self.left_knee is None:
        self.left_knee = body_msgs.msg.SkeletonJoint()
      if self.right_knee is None:
        self.right_knee = body_msgs.msg.SkeletonJoint()
      if self.left_foot is None:
        self.left_foot = body_msgs.msg.SkeletonJoint()
      if self.right_foot is None:
        self.right_foot = body_msgs.msg.SkeletonJoint()
      end = 0
      _x = self
      start = end
      end += 424
      (_x.playerid, _x.head.position.x, _x.head.position.y, _x.head.position.z, _x.head.confidence, _x.neck.position.x, _x.neck.position.y, _x.neck.position.z, _x.neck.confidence, _x.right_hand.position.x, _x.right_hand.position.y, _x.right_hand.position.z, _x.right_hand.confidence, _x.left_hand.position.x, _x.left_hand.position.y, _x.left_hand.position.z, _x.left_hand.confidence, _x.right_shoulder.position.x, _x.right_shoulder.position.y, _x.right_shoulder.position.z, _x.right_shoulder.confidence, _x.left_shoulder.position.x, _x.left_shoulder.position.y, _x.left_shoulder.position.z, _x.left_shoulder.confidence, _x.right_elbow.position.x, _x.right_elbow.position.y, _x.right_elbow.position.z, _x.right_elbow.confidence, _x.left_elbow.position.x, _x.left_elbow.position.y, _x.left_elbow.position.z, _x.left_elbow.confidence, _x.torso.position.x, _x.torso.position.y, _x.torso.position.z, _x.torso.confidence, _x.left_hip.position.x, _x.left_hip.position.y, _x.left_hip.position.z, _x.left_hip.confidence, _x.right_hip.position.x, _x.right_hip.position.y, _x.right_hip.position.z, _x.right_hip.confidence, _x.left_knee.position.x, _x.left_knee.position.y, _x.left_knee.position.z, _x.left_knee.confidence, _x.right_knee.position.x, _x.right_knee.position.y, _x.right_knee.position.z, _x.right_knee.confidence, _x.left_foot.position.x, _x.left_foot.position.y, _x.left_foot.position.z, _x.left_foot.confidence, _x.right_foot.position.x, _x.right_foot.position.y, _x.right_foot.position.z, _x.right_foot.confidence,) = _struct_i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df = struct.Struct("<i3df3df3df3df3df3df3df3df3df3df3df3df3df3df3df")
